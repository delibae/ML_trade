{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Home_ML_proto.ipynb의 사본","provenance":[{"file_id":"1uBbebibbFLp-yy94n-o6zemEXFvtF4yE","timestamp":1634278858319}],"collapsed_sections":[],"authorship_tag":"ABX9TyOQbQWR90+dC18wr+KCvSDR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"VH1_JabFVfOm"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"IEwHVSOn-KLI"},"source":["APRIORI algorithm"]},{"cell_type":"markdown","metadata":{"id":"VzbCgdPS2_9x"},"source":["고려해야될 사항\n","1. 역조건을 생각하기 > 조건과 컨디션이 반대된 경우가 한쌍이 나오면 front 에서도 그것을 즉각 반영할 수 있는 것이 필요함\n","예) 불을 끄면 > 그방의 전자기기 off / 그방의 전자기기 off > 불을 끈다\n","\n","2. support 라인을 몇부터 거를 것인지 고민해야함\n","\n","3. support: 결과와 조건이 일어날 확률 / 전체 경우의 수 ( 전체에서 그냥 일어날 확률)\n","\n","4. confidence: 결과와 조건이 일어날 확률 / 조건이 일어날 확률 ( 조건이 결과를 얼마나 자주 지지해주는가 )\n","\n","5. lift: 조건에서 결과가 일어날 확률 / 전체에서 결과가 일어날 확률( 연관도 분석 핵심)"]},{"cell_type":"markdown","metadata":{"id":"6qwZddM9cqLr"},"source":["To DO\n","\n","  1. 지금은 참인값 즉 결과값이 1일때만 분석하지만 0으로 변할때의 연관도도 분석해야함"]},{"cell_type":"code","metadata":{"id":"ZWtWeVrbVv5c"},"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import torch.nn.init as init\n","import matplotlib.pyplot as plt\n","from google.colab import auth\n","from google.colab import drive\n","from google.colab import files\n","import pandas as pd\n","import numpy as np\n","\n","#데이터 설정및 데이터 모양 설정\n","sample_data = np.array([[1,1,0,1],[0,0,1,0],[0,0,0,0],[1,1,1,1]])\n","column = 4\n","row = 4\n","\n","#조건에 맞는 결과값 저장 공간 마련\n","result_condition = np.empty((0,3),int)\n","\n","# result 는 무조건 참값일때의 조건을 구함\n","for index in range(0,column):\n","  for index2 in range(0,column):\n","    if index != index2:\n","      # 조건열 설정\n","      s1 = index\n","      # 결과열 설정\n","      s2 = index2\n","      \n","      count = 0\n","      count1 = 0\n","      reverse = 0\n","      #support 구하기 (reverse 여부 포함) reverse = 조건이 0인 경우를 말함\n","      for i in range(0,row):\n","\n","        if sample_data[i, s1] == 1 and sample_data[i, s2] == 1:\n","          count += 1\n","        if sample_data[i, s1] == 0 and sample_data[i, s2] == 1:\n","          count1 += 1\n","\n","      if count > count1:\n","        support = count/column\n","      else:\n","        support = count1/column\n","        reverse = 1\n","      # print(support)\n","      # print(reverse)\n","      #confidence 구하기\n","      count = 0\n","      count1 = 0\n","      for i in range(0,row):  \n","        if reverse == 0:\n","          if sample_data[i, s1] == 1:\n","            count += 1\n","          if sample_data[i, s1] == 1 and sample_data[i, s2] == 1:\n","            count1 += 1\n","        else:\n","          if sample_data[i, s1] == 0:\n","            count += 1\n","          if sample_data[i, s1] == 0 and sample_data[i, s2] == 1:\n","            count1 += 1\n","\n","\n","      confidence = count1/count\n","      # print(confidence)\n","\n","      #lift 구하기\n","      count = 0\n","      count1 = 0\n","\n","      for i in range(0,row):\n","        if sample_data[i,s2] == 1:\n","          count += 1\n","\n","      supporty = count/column\n","      lift = confidence/supporty\n","      # print(lift)\n","      if confidence > 0.7 and lift > 1.4:\n","        #임계값을 넘기는 결과_조건을 출력 및 저장\n","        result_condition = np.append(result_condition,np.array([[index2,index,reverse]]),axis = 0)\n","        print(\"support:\", support)\n","        print(\"reverse:\",reverse)\n","        print(\"confidnece:\",confidence)\n","        print(\"lift:\",lift)\n","        print(\"condition:\",index)\n","        print(\"result:\",index2)\n","        print(\"------------------------------\")\n","\n","#결과_조건 재정렬 + 부합하는 조건_결과 개수 구하기\n","print(\"결과 조건 순서 저장\")\n","result_condition = result_condition[result_condition[:, 0].argsort()]\n","print(result_condition)\n","len = result_condition.shape[0]\n","num = result_condition[0,0]\n","print(\"------------------------------\")\n","#조건 조합 저장 리스트 / 조합에 대한 결과 저장 리스트 / 조건 reverse 여부 저장 리스트 / 빈 리스트 생성\n","condition_col = []\n","condition_col_reverse = []\n","result_col = []\n","empty_list = []\n","empty_reverse_list = []\n","#결과_조건에서 결과가 같은 것들끼리 조건 묶기 / 추가: reverse 여부 저장\n","for i in range(0,len):\n","  \n","  if result_condition[i,0] != num:\n","    #이전값 저장\n","    result_col.append(num)\n","    condition_col.append(empty_list)\n","    condition_col_reverse.append(empty_reverse_list)\n","    #새로운 리스트 생성\n","    num = result_condition[i,0]\n","    empty_list = []\n","    empty_list.append(result_condition[i,1])\n","    empty_reverse_list = []\n","    empty_reverse_list.append(result_condition[i,2])\n","  else:\n","    empty_list.append(result_condition[i,1])\n","    empty_reverse_list.append(result_condition[i,2])\n","#결과 + 조건 조합 + 조건 reverse 여부 출력 \n","print(\"결과 -> 조건 조합 + 조건 reverse 여부 순서 출력\")\n","print(result_col)\n","print(condition_col)\n","print(condition_col_reverse)\n","print(\"------------------------------\")\n","  \n","#조건 조합으로 다시 apriori algorithm 구현\n","\n","\n","condition_col_reverse = np.array(condition_col_reverse)\n","condition_col = np.array(condition_col)\n","for_confidence = []\n","for_lift = []\n","for_lift_count = 0\n","result_1 = result_col[0]\n","# support 계산과정 / support_col_save 에 저장\n","support_col_save = []\n","count = 0\n","condition_count = condition_col.shape[0]\n","for h in range(0,condition_count):\n","  condition_len = condition_col[h].size\n","  for i in range(0,column):\n","    true = 0\n","    if sample_data[i,result_1] == 1:\n","      for_lift_count += 1\n","      for j in range(0, condition_len):\n","        if condition_col_reverse[h,j] == 0:\n","          if sample_data[i,condition_col[h,j]] == 1:\n","            true = 1\n","          else:\n","            true = 0\n","            break\n","        else:\n","          if  sample_data[i,condition_col[h,j]] == 0:\n","            true = 1\n","          else:\n","            true = 0\n","            break\n","    # 위 과정은 분자의 조건을 검증하는과정\n","    if true == 1:\n","      count += 1\n","  for_confidence.append(count)\n","  support_col = count/column\n","  support_col_save.append(support)\n","  for_lift.append(for_lift_count/column)\n","  \n","\n","\n","\n","#confidence  and lift 구하기 \n","confidence_col_save = []\n","lift_col_save = []\n","for h in range(0,condition_count):\n","  condition_len = condition_col[h].size\n","  for i in range(0,column):\n","    true = 0\n","    for j in range(0, condition_len):\n","      if condition_col_reverse[h,j] == 0:\n","        if sample_data[i,condition_col[h,j]] == 1:\n","          true = 1\n","        else:\n","          true = 0\n","          break\n","      else:\n","        if  sample_data[i,condition_col[h,j]] == 0:\n","          true = 1\n","        else:\n","          true = 0\n","          break\n","    # 위 과정은 분자의 조건을 검증하는과정\n","  if true == 1:\n","    count += 1\n","  confidence_col = for_confidence[h]/count\n","  confidence_col_save.append(confidence_col)\n","  lift_col_save.append(confidence_col_save[h]/for_lift[h])\n","\n","#sample_data = np.array([[1,0,0,0],[0,1,1,1],[0,1,0,1],[1,1,0,0]])\n","\n","#조건 조합으로 된 연관 알고리즘 list 출력\n","print(\"support_col:\",support_col_save)\n","print(\"confidence_col:\",confidence_col_save)\n","print(\"lift_col:\",lift_col_save)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ItemQvpVU9OB"},"source":["https://medium.com/code-states/%EC%B6%94%EC%B2%9C-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-4e5044960bdd\n","\n","\n","나중에 해볼 알고리즘"]}]}